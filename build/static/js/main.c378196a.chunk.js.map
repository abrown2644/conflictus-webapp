{"version":3,"sources":["logo.svg","components/map/LeafletMap.js","components/map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["LeafletMap","theme","battleItems","corner1","Leaflet","latLng","corner2","customBounds","latLngBounds","MapContainer","center","zoom","minZoom","scrollWheelZoom","zoomControl","maxBounds","maxBoundsViscosity","style","height","TileLayer","attribution","url","map","battle","index","Circle","pathOptions","color","location","latitude","longitude","Popup","title","date","Map","year","Date","getFullYear","useState","value","label","selectedWar","setSelectedWar","loading","wars","error","warsState","setWarsState","battles","battlesState","setBattlesState","sliderValue","setSliderValue","fetchBattles","war","fetch","then","res","json","result","data","document","useEffect","id","Grid","container","position","zIndex","alignItems","marginTop","item","xs","md","display","justifyContent","marginRight","border","borderRadius","onChange","e","placeholder","options","name","className","defaultValue","isLoading","isDisabled","bottom","Button","variant","onClick","console","log","fetchBattlesByDates","Slider","event","valueLabelDisplay","aria-labelledby","min","max","App","src","logo","left","top","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c378196a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c40c83bd.svg\";","import 'leaflet/dist/leaflet.css';\r\nimport Leaflet from 'leaflet'\r\nimport { MapContainer, TileLayer, Popup, Circle, ZoomControl } from 'react-leaflet'\r\n\r\nfunction LeafletMap({ theme, battleItems}) {\r\n\r\n    //set max map bounds\r\n    const corner1 = Leaflet.latLng(-90, -200)\r\n    const corner2 = Leaflet.latLng(90, 200)\r\n    const customBounds = Leaflet.latLngBounds(corner1, corner2)\r\n\r\n    return(\r\n        <MapContainer center={[28.987776073100964, -40.70433830991955]}\r\n         zoom={3}\r\n          minZoom={3}\r\n           scrollWheelZoom={true}\r\n            zoomControl={false}\r\n             maxBounds={customBounds}\r\n             maxBoundsViscosity={1}\r\n              style={{ height: \"100vh\" }}\r\n             >\r\n            {theme == 'light' ? <TileLayer\r\n                attribution='Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}\"\r\n            /> : \r\n            <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\r\n            url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\r\n            />}\r\n            {/* <ZoomControl position=\"bottomright\"/>  */}\r\n            {battleItems && battleItems.map((battle, index) => (           \r\n                <Circle key={index} pathOptions={{ color: 'red' }} center={[battle.location.latitude, battle.location.longitude]}>\r\n                    <Popup>\r\n                        <h4>{battle.title}</h4>\r\n                        <h5>{battle.date}</h5>                    \r\n                    </Popup>\r\n                </Circle>\r\n            ))}            \r\n        </MapContainer>\r\n    );\r\n}\r\nexport default LeafletMap\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\"\r\nimport SelectSearch from 'react-select-search'\r\nimport Select from 'react-select'\r\nimport LeafletMap from './LeafletMap'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './Map.scss';\r\n\r\nfunction Map({ theme }) { \r\n    let year = new Date().getFullYear()\r\n  \r\n    const [selectedWar, setSelectedWar] = useState({\r\n      value: 1,\r\n      label: \"Seven Years' War\"\r\n    });\r\n    const [warsState, setWarsState] = useState({\r\n        loading: true,\r\n        wars: null,\r\n        error: null\r\n    });    \r\n    const [battlesState, setBattlesState] = useState({\r\n        loading: true,        \r\n        battles: null\r\n    });\r\n    const [sliderValue, setSliderValue] = useState([year - 100, year ]);\r\n    \r\n    //fetch wars\r\n    useEffect(() => {\r\n        fetch(\"https://localhost:44346/api/wars\")\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {            \r\n              // console.log(result.data)\r\n              setWarsState({ loading:false, wars: result.data});\r\n            },\r\n            \r\n            (error) => {\r\n              setWarsState({ loading:false, error: error});\r\n            }\r\n          )\r\n      }, [])\r\n\r\n    //initial battles to load\r\n    useEffect(() => {\r\n      fetchBattles(selectedWar)\r\n    }, [])\r\n\r\n\r\n    function fetchBattles(war) {\r\n      let url = `https://localhost:44346/api/battles/war=${war.value}`;\r\n      fetch(url).then(res => res.json())\r\n      .then(result => {\r\n        // console.log(result.data);\r\n        setBattlesState({battles: result.data});\r\n      })\r\n      // console.log(war);\r\n      setSelectedWar(war.value);\r\n      document.title = war.label;      \r\n    };\r\n    \r\n    function fetchBattlesByDates(sliderValue) { \r\n      console.log(\"fetching by date range!\");\r\n      console.log(sliderValue);        \r\n      let url = `https://localhost:44346/api/battles/date=${sliderValue[0]},${sliderValue[1]}`;\r\n      fetch(url).then(res => res.json())\r\n      .then(result => {\r\n        // console.log(result.data);\r\n        setBattlesState({battles: result.data});\r\n      },[])       \r\n      document.title = `${sliderValue[0]} - ${sliderValue[1]}`;      \r\n    };\r\n\r\n   \r\n    //slider\r\n    const handleSliderChange = (event, data) => {\r\n      // console.log(data);\r\n      setSliderValue(data);      \r\n    };    \r\n\r\n    // function valuetext(sliderValue) {\r\n    //   return `value: ${sliderValue}`;\r\n    // }\r\n\r\n    return (        \r\n        <div id=\"map\">                 \r\n          <Grid container style={{ position: \"absolute\", zIndex:\"99999\", alignItems: \"center\", marginTop: \"8px\"}}>\r\n            <Grid item xs={2} md={1}>\r\n              {/* <img src=\"https://via.placeholder.com/60x60.png\"></img> */}\r\n            </Grid>\r\n            <Grid item xs={10} md={11} style={{display: \"flex\", justifyContent: \"end\"}}>\r\n              <Grid item xs={12} md={3} style={{marginRight: \"10px\", border: \"1px solid #bb0101\", borderRadius: \"5px\"}}>\r\n                {warsState.wars ? \r\n                <Select onChange={(e) => fetchBattles(e)} \r\n                  placeholder={\"select a war\"} \r\n                  options={warsState.wars.map((war, index) =>( {value:war.id, label:war.name} ))} \r\n                  className=\"selectMenu\"\r\n                  style={{marginRight: \"10px\"}}\r\n                />\r\n                : \r\n                <Select defaultValue={1} \r\n                  isLoading={true} \r\n                  isDisabled={true} \r\n                  placeholder={\"loading..\"}\r\n                  options={\"none\"} \r\n                  style={{marginRight: \"10px\"}}\r\n                />}\r\n              </Grid>              \r\n            </Grid>            \r\n          </Grid>\r\n\r\n          <Grid container style={{display: \"flex\", justifyContent: \"center\", position: \"absolute\", zIndex:\"999\", alignItems: \"center\", bottom: \"20px\"}}>\r\n            <Grid item xs={9}>\r\n              <div style={{display: \"flex\", justifyContent: \"space-evenly\"}}>              \r\n                <b>from: {sliderValue[0]}</b>                                      \r\n                <b>to: {sliderValue[1]}</b>                                    \r\n                <Button variant=\"contained\" onClick={() => fetchBattlesByDates(sliderValue)}>FIND</Button>\r\n              </div>\r\n              <Slider\r\n                value={sliderValue}\r\n                onChange={handleSliderChange}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                min={-1273}\r\n                max={new Date().getFullYear()}\r\n                // getAriaValueText={valuetext}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          \r\n          {battlesState.battles ? <LeafletMap theme={theme} battleItems={battlesState.battles}/> : <LeafletMap theme={theme} />}\r\n          {/* {battlesState.battles && console.log(battlesState.battles)}    */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map","import logo from './logo.svg';\nimport Map from './components/map/Map'\nimport { pushRotate as Menu } from 'react-burger-menu'\n\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <img src={logo} style={{position:\"absolute\", zIndex: \"99999999\", left: \"0\", top: \"0\", height:\"70px\"}}></img>            \n        <Map theme=\"light\"/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}